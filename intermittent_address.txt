   abort:
   type_name:
   out_string:
   out_int:
   in_string:
   in_int:
   length:
   concat:
   substr:
A
      A-var = 0
   value:
   set_var:
      ENTRA A-var = A-set_var-num
   method1:
   method2:
     	lw $t1, A-method2-num1($gp)
     	lw $t2, A-method2-num2($gp)
     	add $t3, $t1, $t2
     	sw $t3, A-method2-t3($gp)
      A-method2-let-1-x = A-method2-t3
      la $a0, B_instance
      lw $a1, (newB)($gp)
      ELSE li $a2, A-method2-let-1-x
      jal set_var

      move $A-method2-t3, $v0
   method3:
      ENTRA A-method3-let-1-x = ~A-method3-num
      la $a0, C_instance
      lw $a1, (newC)($gp)
      ELSE li $a2, A-method3-let-1-x
      jal set_var

      move $A-method3-t1, $v0
   method4:
     	lw $t1, A-method4-num2($gp)
     	lw $t2, A-method4-num1($gp)
     	A-method4-t3 = t1<t2
	if A-method4-t3 goto L1
	goto L2
	L1
     	lw $t4, A-method4-num1($gp)
     	lw $t5, A-method4-num2($gp)
     	sub $t6, $t4, $t5
     	sw $t6, A-method4-t6($gp)
      A-method4-let-2-x = A-method4-t6
      la $a0, D_instance
      lw $a1, (newD)($gp)
      ELSE li $a2, A-method4-let-2-x
      jal set_var

      move $A-method4-t6, $v0
	L2
     	lw $t7, A-method4-num2($gp)
     	lw $t8, A-method4-num1($gp)
     	sub $t9, $t7, $t8
     	sw $t9, A-method4-t9($gp)
      A-method4-let-2-x = A-method4-t9
      la $a2, D_instance
      lw $a3, (newD)($gp)
      ELSE li $a4, A-method4-let-2-x
      jal set_var

      move $A-method4-t9, $v0
	END_L2
   method5:
	L1
     	lw $t1, A-method5-let-2-y($gp)
     	lw $t2, A-method5-num($gp)
     	A-method5-t3 = t1<=t2
	if A-method5-t3 goto L2
	goto END_L1
	L2
     	lw $t4, A-method5-let-1-x($gp)
     	lw $t5, A-method5-let-2-y($gp)
     	mult $t4, $t5
     	mfhi $t6
     	sw $t6, A-method5-t6($gp)
      A-method5-let-1-x = A-method5-t6
     	lw $t6, A-method5-let-2-y($gp)
     	addi $t7, $t6, 1
     	sw $t7, A-method5-t7($gp)
      A-method5-let-2-y = A-method5-t7
	END_L2
	goto L1
	END_L1
      la $a0, E_instance
      lw $a1, (newE)($gp)
      ELSE li $a2, A-method5-let-1-x
      jal set_var

      move $A-method5-t7, $v0
B
   method5:
     	lw $t1, B-method5-num($gp)
     	lw $t2, B-method5-num($gp)
     	mult $t1, $t2
     	mfhi $t3
     	sw $t3, B-method5-t3($gp)
      B-method5-let-1-x = B-method5-t3
      la $a0, E_instance
      lw $a1, (newE)($gp)
      ELSE li $a2, B-method5-let-1-x
      jal set_var

      move $B-method5-t3, $v0
C
   method6:
      ENTRA C-method6-let-1-x = ~C-method6-num
      la $a0, A_instance
      lw $a1, (newA)($gp)
      ELSE li $a2, C-method6-let-1-x
      jal set_var

      move $C-method6-t1, $v0
   method5:
     	lw $t1, C-method5-num($gp)
     	lw $t2, C-method5-num($gp)
     	mult $t1, $t2
     	mfhi $t3
     	sw $t3, C-method5-t3($gp)
     	lw $t4, C-method5-num($gp)
     	mult $num*num, $t4
     	mfhi $t5
     	sw $t5, C-method5-t5($gp)
      C-method5-let-1-x = C-method5-t5
      la $a0, E_instance
      lw $a1, (newE)($gp)
      ELSE li $a2, C-method5-let-1-x
      jal set_var

      move $C-method5-t5, $v0
D
   method7:
     	lw $t1, D-method7-let-1-x($gp)
     	D-method7-t2 = t1<0
	if D-method7-t2 goto L1
	goto L2
	L1
      ELSE li $a0, ~D-method7-let-1-x
      jal method7

      move $D-method7-t3, $v0
	L2
     	lw $t4, D-method7-let-1-x($gp)
     	D-method7-t5 = 0=t4
	if D-method7-t6 goto L3
	goto L4
	L3
	L4
     	lw $t7, D-method7-let-1-x($gp)
     	D-method7-t8 = 1=t7
	if D-method7-t9 goto L5
	goto L6
	L5
	L6
     	lw $t10, D-method7-let-1-x($gp)
     	D-method7-t11 = 2=t10
	if D-method7-t12 goto L7
	goto L8
	L7
	L8
     	lw $t13, D-method7-let-1-x($gp)
     	sub $t14, $t13, 3
     	sw $t14, D-method7-t14($gp)
      ELSE li $a0, D-method7-t14
      jal method7

      move $D-method7-t15, $v0
	END_L8
	END_L6
	END_L4
	END_L2
E
   method6:
     	lw $t1, E-method6-num($gp)
     	div $t1, 8
     	mflo $t2
     	sw $t2, E-method6-t2($gp)
      E-method6-let-1-x = E-method6-t2
      la $a0, A_instance
      lw $a1, (newA)($gp)
      ELSE li $a2, E-method6-let-1-x
      jal set_var

      move $E-method6-t2, $v0
Main
      Main-char = String
      Main-avar = A
      Main-a_var = A
      Main-flag = true
   is_even:
     	lw $t1, Main-is_even-let-1-x($gp)
     	Main-is_even-t2 = t1<0
	if Main-is_even-t2 goto L1
	goto L2
	L1
      ELSE li $a0, ~Main-is_even-let-1-x
      jal is_even

      move $Main-is_even-t3, $v0
	L2
     	lw $t4, Main-is_even-let-1-x($gp)
     	Main-is_even-t5 = 0=t4
	if Main-is_even-t6 goto L3
	goto L4
	L3
	L4
     	lw $t7, Main-is_even-let-1-x($gp)
     	Main-is_even-t8 = 1=t7
	if Main-is_even-t9 goto L5
	goto L6
	L5
	L6
     	lw $t10, Main-is_even-let-1-x($gp)
     	sub $t11, $t10, 2
     	sw $t11, Main-is_even-t11($gp)
      ELSE li $a0, Main-is_even-t11
      jal is_even

      move $Main-is_even-t12, $v0
	END_L6
	END_L4
	END_L2
   main:
      la $a0, A_instance
      ENTRA Main-avar = A
      lw $a1, Main-avar($gp)
      ELSE li $a2, 2
      jal set_var

      move $Main-main-t1, $v0
      lw $a2, Main-avar($gp)
      jal value

      move $Main-main-t2, $v0
      lw $a3, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t3, $v0
      lw $a3, Main-avar($gp)
      jal value

      move $Main-main-t4, $v0
      lw $a4, Main-avar($gp)
      jal Main_value
      jal is_even

      move $Main-main-t5, $v0
	if Main-main-t5 goto L1
	goto L2
	L1
      ELSE li $a4, " es par!\n"
      jal out_string

      move $Main-main-t6, $v0
	L2
      ELSE li $a4, " es impar!\n"
      jal out_string

      move $Main-main-t7, $v0
	END_L2
      la $a4, A_instance
      lw $a5, (newA)($gp)
      ELSE li $a6, 3
      jal set_var

      move $Main-main-t8, $v0
      ENTRA Main-a_var = Main-main-t8
      la $a6, B_instance
      lw $a7, Main-avar($gp)
      jal value

      move $Main-main-t8, $v0
      lw $a8, Main-a_var($gp)
      jal value

      move $Main-main-t9, $v0
      lw $a9, (newB)($gp)
      ELSE li $a10, avar.value()
      lw $a11, Main-a_var($gp)
      jal Main_value
      jal method2

      move $Main-main-t10, $v0
      ENTRA Main-avar = Main-main-t10
      lw $a10, Main-avar($gp)
      jal value

      move $Main-main-t10, $v0
      lw $a10, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t11, $v0
      ELSE li $a10, "\n"
      jal out_string

      move $Main-main-t12, $v0
      la $a10, C_instance
      lw $a11, Main-avar($gp)
      jal value

      move $Main-main-t13, $v0
      lw $a12, (newC)($gp)
      lw $a13, Main-avar($gp)
      jal Main_value
      jal method6

      move $Main-main-t14, $v0
      ENTRA Main-avar = Main-main-t14
      lw $a13, Main-avar($gp)
      jal value

      move $Main-main-t14, $v0
      lw $a14, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t15, $v0
      ELSE li $a14, "\n"
      jal out_string

      move $Main-main-t16, $v0
      la $a14, A_instance
      lw $a15, (newA)($gp)
      ELSE li $a16, 5
      jal set_var

      move $Main-main-t17, $v0
      ENTRA Main-a_var = Main-main-t17
      la $a16, D_instance
      lw $a17, Main-avar($gp)
      jal value

      move $Main-main-t17, $v0
      lw $a18, Main-a_var($gp)
      jal value

      move $Main-main-t18, $v0
      lw $a19, (newD)($gp)
      ELSE li $a20, avar.value()
      lw $a21, Main-a_var($gp)
      jal Main_value
      jal method4

      move $Main-main-t19, $v0
      ENTRA Main-avar = Main-main-t19
      lw $a20, Main-avar($gp)
      jal value

      move $Main-main-t19, $v0
      lw $a20, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t20, $v0
      ELSE li $a20, "\n"
      jal out_string

      move $Main-main-t21, $v0
      lw $a20, Main-avar($gp)
      ELSE li $a21, 5
      jal set_var

      move $Main-main-t22, $v0
      la $a21, C_instance
      lw $a22, Main-avar($gp)
      jal value

      move $Main-main-t23, $v0
      lw $a23, A($gp)
      lw $a24, Main-avar($gp)
      jal Main_value
      jal method5

      move $Main-main-t24, $v0
      ENTRA Main-avar = Main-main-C@t24
      lw $a24, Main-avar($gp)
      jal value

      move $Main-main-t24, $v0
      lw $a25, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t25, $v0
      ELSE li $a25, "\n"
      jal out_string

      move $Main-main-t26, $v0
      lw $a25, Main-avar($gp)
      ELSE li $a26, 6
      jal set_var

      move $Main-main-t27, $v0
      la $a26, C_instance
      lw $a27, Main-avar($gp)
      jal value

      move $Main-main-t28, $v0
      lw $a28, B($gp)
      lw $a29, Main-avar($gp)
      jal Main_value
      jal method5

      move $Main-main-t29, $v0
      ENTRA Main-avar = Main-main-C@t29
      lw $a29, Main-avar($gp)
      jal value

      move $Main-main-t29, $v0
      lw $a30, Main-avar($gp)
      jal Main_value
      jal out_int

      move $Main-main-t30, $v0
      ELSE li $a30, "\n"
      jal out_string

      move $Main-main-t31, $v0
